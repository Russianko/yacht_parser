import random
import os
from pip._internal import locations
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ApplicationBuilder
from dotenv import load_dotenv


#–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

TELEGRAM_API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')


#–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

TELEGRAM_API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')

# —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
def fetch_yacht_data(yacht_type, budget):
    yacht_types = ['–ú–æ—Ç–æ—Ä–Ω–∞—è —è—Ö—Ç–∞', '–ü–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞', '–ö–∞—Ç–∞–º–∞—Ä–∞–Ω', '–†—ã–±–æ–ª–æ–≤–Ω–æ–µ —Å—É–¥–Ω–æ', '–õ—é–∫—Å–æ–≤–∞—è —è—Ö—Ç–∞']
    locations = ['–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–µ –º–æ—Ä–µ', '–ö–∞—Ä–∏–±—ã', '–¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω']

    yacht_data = []
    for _ in range(5):
        price = random.randint(1, budget)
        yacht = {'type': random.choice(yacht_types),
                 'price': price,
                 'location': random.choice(locations),
                 'url':'https://example.com/yacht'
                 }
        yacht_data.append(yacht)
    return yacht_data


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —è—Ö—Ç.\n–ù–∞–ø–∏—à–∏ '–ø–æ–∏—Å–∫' –∏–ª–∏ '–Ω–∞–π–¥–∏', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    user_message = update.message.text.lower()
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª {user_message}")

    if '–ø–æ–∏—Å–∫' in user_message or '–Ω–∞–π–¥–∏' in user_message:
        #asking yacht type
        await update.message.reply_text(f'(–º–æ—Ç–æ—Ä–Ω–∞—è —è—Ö—Ç–∞, –ø–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞, –∫–∞—Ç–∞–º–∞—Ä–∞–Ω...): {user_message}')
    elif '–º–æ—Ç–æ—Ä–Ω–∞—è —è—Ö—Ç–∞' in user_message or '–ø–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞' in user_message or '–∫–∞—Ç–∞–º–∞—Ä–∞–Ω' in user_message:
        #ask for budget
        yacht_type = user_message
        context.user_data['yacht_type'] = yacht_type
        await update.message.reply_text(f"üí∞ –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?")

    elif user_message.isdigit():
        budget = int(user_message)
        yacht_type = context.user_data['yacht_type']

        #taking data
        yachts = fetch_yacht_data(yacht_type, budget)

        #send to user
        for yacht in yachts:
            await update.message.reply_text(f"finded {yacht['type']} for {yacht['price']} is located in {yacht['location']}. More information: {yacht['url']}")

        #new search
        await update.message.reply_text("üîÑ –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫? –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–∏—Å–∫' –∏–ª–∏ '–Ω–∞–π–¥–∏'.")

    else:
        await update.message.reply_text("ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–∏—Å–∫' –∏–ª–∏ '–Ω–∞–π–¥–∏', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

#create our bot
def main():
    app = Application.builder().token(TELEGRAM_API_TOKEN).build()

    #Register command handlers
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()


