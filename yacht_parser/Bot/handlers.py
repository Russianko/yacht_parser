import os
import sqlite3
import textwrap
import re
from yacht_parser.Parser.parse_yacht import parse_yacht
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from yacht_parser.Parser.get_links_by_producer import get_links_by_producer
from telegram import ReplyKeyboardMarkup


# –ë—Ä–µ–Ω–¥—ã —è—Ö—Ç
BRANDS = [
    "Bavaria", "Bayliner", "B√©n√©teau", "Cranchi", "Dufour",
    "Jeanneau", "Lagoon", "Princess Yachts", "Quicksilver", "Sea Ray"
]

BOAT_TYPES = ["–ú–æ—Ç–æ—Ä–Ω–∞—è", "–ü–∞—Ä—É—Å–Ω–∞—è", "–ö–∞—Ç–∞–º–∞—Ä–∞–Ω"]

BOAT_TYPE_CODES = {
    "–ü–∞—Ä—É—Å–Ω–∞—è": "bt1",
    "–ú–æ—Ç–æ—Ä–Ω–∞—è": "bt2",
    "–ö–∞—Ç–∞–º–∞—Ä–∞–Ω": "bc27"
}


PRICE_OPTIONS = [10000, 20000, 30000, 50000, 70000, 90000]

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.normpath(os.path.join(BASE_DIR, '..', 'Data', 'yacht.db'))

conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

# üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º
cursor.execute("DELETE FROM yachts")
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω—ã
def extract_numeric_price(price_str):
    cleaned = price_str.replace('\xa0', ' ').replace('‚Ç¨', '').replace('¬£', '')
    match = re.search(r'\d[\d\.]*', cleaned)
    if match:
        num_str = match.group(0).replace('.', '')
        return int(num_str)
    raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É: {price_str}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥
async def unknown_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üôà –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞.")

# ---------- Start ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —è—Ö—Ç –ø–æ –±—Ä–µ–Ω–¥—É, —Ç–∏–ø—É –∏ –±—é–¥–∂–µ—Ç—É.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üîç",
        reply_markup=reply_markup
    )


# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞
async def begin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = []
    row = []
    for i, brand in enumerate(BRANDS):
        row.append(InlineKeyboardButton(brand, callback_data=f"brand_{brand}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text("üõ• –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —è—Ö—Ç—ã:", reply_markup=reply_markup)



# –≤—ã–±–∏—Ä–∞–µ–º –±—Ä–µ–Ω–¥
async def brand_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    brand = query.data.replace("brand_", "")
    context.user_data['brand'] = brand
    await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –±—Ä–µ–Ω–¥: {brand}")

    keyboard = [[InlineKeyboardButton(btype, callback_data=f"type_{btype}")] for btype in BOAT_TYPES]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —è—Ö—Ç—ã:", reply_markup=reply_markup)


# –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ª–æ–¥–∫–∏
async def type_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    boat_type = query.data.replace("type_", "")
    context.user_data['type'] = boat_type


    keyboard = [[InlineKeyboardButton(f"–î–æ {price} ‚Ç¨", callback_data=f"price_{price}")] for price in PRICE_OPTIONS]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç:", reply_markup=reply_markup)

# —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–Ω—É, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
async def price_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º
    cursor.execute("DELETE FROM yachts")
    conn.commit()
    query = update.callback_query
    await query.answer()

    price_limit = int(query.data.replace("price_", ""))
    context.user_data['budget'] = price_limit
    await query.edit_message_text(f"‚úÖ –ë—é–¥–∂–µ—Ç: –¥–æ {price_limit} ‚Ç¨")

    brand = context.user_data.get('brand')
    boat_type_name = context.user_data.get('type')
    budget = context.user_data.get('budget')

    await query.message.reply_text(f"üîç –ò—â—É —è—Ö—Ç—ã –±—Ä–µ–Ω–¥–∞ {brand}, —Ç–∏–ø–∞ {boat_type_name}, –¥–æ {budget} ‚Ç¨...")

    # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –ª–æ–¥–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—é –≤ <select name="btcid">
    BOAT_TYPE_CODES = {
        "–ü–∞—Ä—É—Å–Ω–∞—è": "bt1",
        "–ú–æ—Ç–æ—Ä–Ω–∞—è": "bt2",
        "–ö–∞—Ç–∞–º–∞—Ä–∞–Ω": "bc27"
    }

    boat_type_code = BOAT_TYPE_CODES.get(boat_type_name)

    try:
        links = get_links_by_producer(brand, max_price=budget, boat_type_code=boat_type_code)
    except Exception as e:
        await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
        return

    if not links:
        await query.message.reply_text("üòû –Ø—Ö—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()



    cursor.execute("""
        CREATE TABLE IF NOT EXISTS yachts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            location TEXT,
            build_year TEXT,
            price TEXT,
            price_number INTEGER,
            description TEXT,
            image_urls TEXT,
            url TEXT UNIQUE
        )
    """)
    conn.commit()

    for link in links:
        try:
            parse_yacht(link, cursor)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {link}: {e}")
            continue

    conn.commit()

    cursor.execute("""
        SELECT title, price, price_number, url
        FROM yachts
        WHERE price_number IS NOT NULL AND price_number <= ?
        ORDER BY price_number ASC
    """, (budget,))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await query.message.reply_text("üòï –ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for row in rows:
        title, price, _, url = row
        await query.message.reply_text(f"üè∑ {title}\nüí∞ {price}\nüîó {url}")

    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="start_search")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "üîÅ –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?",
        reply_markup=reply_markup
    )