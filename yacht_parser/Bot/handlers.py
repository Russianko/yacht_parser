from telegram import Update
from telegram.ext import ContextTypes
from Parser.mock_data import fetch_yacht_data

# –ö–æ–º–∞–Ω–¥–∞ /Start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —è—Ö—Ç.\n–ù–∞–ø–∏—à–∏ '–ø–æ–∏—Å–∫' –∏–ª–∏ '–Ω–∞–π–¥–∏', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")

    if '–ø–æ–∏—Å–∫' in user_message or '–Ω–∞–π–¥–∏' in user_message:
        #asking yacht type
        await update.message.reply_text(f'(–º–æ—Ç–æ—Ä–Ω–∞—è —è—Ö—Ç–∞, –ø–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞, –∫–∞—Ç–∞–º–∞—Ä–∞–Ω...): {user_message}')
    elif any(x in user_message for x in ['–º–æ—Ç–æ—Ä–Ω–∞—è —è—Ö—Ç–∞', '–ø–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞', '–∫–∞—Ç–∞–º–∞—Ä–∞–Ω']):
        context.user_data['yacht_type'] = user_message
        await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ü–∏—Ñ—Ä–∞—Ö:')

    elif user_message.isdigit():
        budget = int(user_message)
        yacht_type = context.user_data.get('yacht_type', '–ª—é–∫—Å–æ–≤–∞—è —è—Ö—Ç–∞')

        #taking data
        yachts = fetch_yacht_data(yacht_type, budget)

        #send to user
        for yacht in yachts:
            await update.message.reply_text(f"–ù–∞—à–µ–ª {yacht['type']} –∑–∞ {yacht['price']} \n–≤ —Ä–µ–≥–∏–æ–Ω–µ {yacht['location']}. –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {yacht['url']}")

        #new search
        await update.message.reply_text("üîÑ –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫? –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–∏—Å–∫' –∏–ª–∏ '–Ω–∞–π–¥–∏'.")

    else:
        await update.message.reply_text("ü§ñ –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–∏—Å–∫' –∏–ª–∏ '–Ω–∞–π–¥–∏', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
